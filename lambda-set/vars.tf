// The name of the Lambda function
variable "name" {
  type = string
}
// The Lambda handler
variable "handler" {
  type = string
}
// The Lambda runtime
variable "runtime" {
  type = string
}
// The Lambda memory size (in MB)
variable "memory_size" {
  type = number
}
// The Lambda timeout (in seconds)
variable "timeout" {
  type = number
}
// Whether it's a Lambda@Edge function
variable "edge" {
  type = bool
}
variable "publish" {
  description = "Whether the Lambda should be published as a new version."
  type        = bool
  default     = true
}
// Async config
variable "maximum_event_age_in_seconds" {
  type    = number
  default = 21600
}
// Async config
variable "maximum_retry_attempts" {
  type    = number
  default = 2
}
// The sourcefile to zip and upload.
// Either this, the "sourcefile" variable, or the "archive" variable must be provided.
variable "sourcefile" {
  type    = string
  default = null
}
// The directory that contains all files that must be bundled into the Lambda archive for upload
// Either this, the "sourcefile" variable, or the "archive" variable must be provided.
variable "directory" {
  type    = string
  default = null
}
// The data.archive_file object that is the archive to upload
// Either this, the "sourcefile" variable, or the "directory" variable must be provided.
variable "archive" {
  type = object({
    output_path         = string
    output_base64sha256 = string
  })
  default = null
}
variable "iam_role_arn" {
  type    = any
  default = null
}
variable "add_logs_policy" {
  description = "Whether to add a policy allowing logging to the created log group (only applies if the `iam_role_arn` variable is provided)."
  type        = bool
  default     = false
}
// Any policies to attach to the role that this Lambda runs as
variable "role_policy_arns" {
  type    = list(string)
  default = []
}
// How many days to retain CloudWatch logs generated by this Lambda
variable "cloudwatch_retention_days" {
  type    = number
  default = 14
}
// An optional list of service/arn pairs that should be allowed to invoke this Lambda.
// The service value is required, the arn can be 'null' to allow everything from that service.
variable "execution_services" {
  type = list(object({
    service = string
    arn     = string
  }))
  default = []
}
// The VPC config for the Lambda. If 'null' (default), the Lambda is not placed in a VPC.
variable "vpc_config" {
  type = object({
    subnet_ids         = list(string)
    security_group_ids = list(string)
  })
  default = null
}
// A map of environment variable key-value pairs
variable "environment" {
  type    = map(any)
  default = {}
}
// The schedule to run this Lambda on (uses CloudWatch Events schedule notation). If not provided, the Lambda will not run on a schedule
variable "schedules" {
  type    = map(string)
  default = {}
}
// ARN of the lambda function to subscribe logs to
variable "logs_subscription_lambda_arn" {
  type    = string
  default = null
}
// Name of the lambda subscription
variable "logs_subscription_name" {
  type    = string
  default = "Lambda Subscription"
}
// Filter to use for the lambda subscription
variable "logs_subscription_filter" {
  type    = string
  default = ""
}
// Whether to apply a Lambda Permission for the log group to invoke the subscription Lambda
variable "logs_apply_subscription_permission" {
  type    = bool
  default = true
}
// The concurrency limit
variable "reserved_concurrent_executions" {
  type    = number
  default = null
}
variable "layers" {
  description = "Layers to use with this Lambda, in the same format that they would be accepted by the `aws_lambda_function` resource. Defaults to an empty list (`[]`)."
  type        = list(string)
  default     = []
}


locals {
  archive = var.archive != null ? var.archive : {
    output_path         = data.archive_file.archive[0].output_path
    output_base64sha256 = data.archive_file.archive[0].output_base64sha256
  }
  iam_role_arn = var.iam_role_arn == null ? aws_iam_role.lambda_role[0].arn : var.iam_role_arn
}
